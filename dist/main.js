#!/usr/bin/env node
!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=10)}([function(e,r){e.exports='exports.{{!--actionName--!}} = (req, res, next) => {\r\n    res.send("You have just reached action: {{!--actionName--!}}");\r\n}'},function(e,r){e.exports="exports.getIndex = (req, res, next) => {\r\n    res.render('index', { title: 'Express' });\r\n}"},function(e,r){e.exports="var viewConfig = require('./config/view');\r\nvar errorConfig = require('./config/error');\r\nvar utilitiesConfig = require('./config/utilities');\r\nvar routesConfig = require('./config/routes');\r\nvar Sequelize = require('sequelize');\r\n\r\nvar express = require('express');\r\n\r\nvar app = express();\r\n\r\nviewConfig(app);\r\nutilitiesConfig(app);\r\nroutesConfig(app);\r\nerrorConfig(app);\r\n\r\nmodule.exports = app;\r\n"},function(e,r){e.exports="var createError = require('http-errors');\r\n\r\nmodule.exports = (app) => {\r\n    app.use(function (req, res, next) {\r\n        next(createError(404));\r\n    });\r\n    \r\n    // error handler\r\n    app.use(function (err, req, res, next) {\r\n        // set locals, only providing error in development\r\n        res.locals.message = err.message;\r\n        res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n    \r\n        // render the error page\r\n        res.status(err.status || 500);\r\n        res.render('error');\r\n    });\r\n};"},function(e,r){e.exports="var indexRouter = require('../routes/index');\r\n\r\nmodule.exports = (app) => {\r\n    app.use('/', indexRouter);\r\n    // !-- Do not remove this line --! //\r\n};"},function(e,r){e.exports="var logger = require('morgan');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\n\r\nmodule.exports = (app) => {\r\n    app.use(logger('dev'));\r\n    app.use(express.json());\r\n    app.use(express.urlencoded({ extended: false }));\r\n    app.use(cookieParser());\r\n    app.use(express.static(path.join(__dirname,'..','public')));\r\n};"},function(e,r){e.exports="var path = require('path');\r\n\r\nmodule.exports = (app) => {\r\n    app.set('views', path.join(__dirname,'..', 'views'));\r\n    app.set('view engine', '{{!--view_engine--}}');\r\n};"},function(e,r){e.exports='{\r\n    "development": {\r\n      "username": "root",\r\n      "password": null,\r\n      "database": "database_development",\r\n      "dialect": "sqlite",\r\n      "storage": "./main.sqlite"\r\n    },\r\n    "test": {\r\n      "username": "root",\r\n      "password": null,\r\n      "database": "database_test",\r\n      "dialect": "sqlite",\r\n      "storage": "./main.sqlite"\r\n    },\r\n    "production": {\r\n      "username": "root",\r\n      "password": null,\r\n      "database": "database_production",\r\n      "dialect": "sqlite",\r\n      "storage": "./main.sqlite"\r\n    }\r\n  }\r\n  '},function(e,r){e.exports="var express = require('express');\r\nvar router = express.Router();\r\nvar indexController = require('../controllers/index.js');\r\n/* GET home page. */\r\nrouter.get('/', indexController.getIndex);\r\n\r\nmodule.exports = router;\r\n"},function(e,r){e.exports="var express = require('express');\r\nvar router = express.Router();\r\nvar {{!--routeName--!}}Controller = require('../controllers/{{!--routeName--!}}.js');\r\n\r\n// !-- Do not remove this line --! //\r\n\r\nmodule.exports = router;\r\n"},function(e,r,n){"use strict";n.r(r);var t=n(1),o=n.n(t),s=n(2),i=n.n(s),a=n(3),l=n.n(a),c=n(4),u=n.n(c),p=n(5),d=n.n(p),g=n(6),m=n.n(g),f=n(7),x=n.n(f),v=n(8),h=n.n(v),j=n(0),w=n.n(j),q=n(9),y=n.n(q),b=n(11),S=n(12),C=n(13),F=n(14),_=n(15).terminal;const E="controllers",I="config",N="routes";S.config.silent=!1,b.command("new <name>").action(e=>{let r;console.log("Installing express-generator ..."),S.exec("npm install express-generator -g"),console.log("Creating express project ..."),F.prompt([{type:"list",name:"viewEngine",message:"Which view engine you want to use ?",default:"no-view",choices:["ejs","hbs","hjs","jade","pug","twig","vash"]}]).then(n=>{r=n.viewEngine,S.exec("express --force --view="+r+" "+e),S.cd(e),S.exec("npm install"),S.exec("npm install sqlite3 --save"),S.exec("npm install sequelize --save"),S.exec("npm install sequelize-cli -g --save"),S.exec("sequelize init"),C.writeFileSync("./app.js",i.a,e=>{S.echo(e)}),S.mkdir(E),S.cd(I),C.writeFileSync("./config.json",x.a),S.touch("error.js"),S.touch("routes.js"),S.touch("utilities.js"),S.touch("view.js"),S.touch("config.json"),C.writeFileSync("./error.js",l.a),C.writeFileSync("./routes.js",u.a),C.writeFileSync("./utilities.js",d.a),C.writeFileSync("./view.js",m.a.replace("{{!--view_engine--}}",r)),S.cd(".."),S.cd(E),S.touch("index.js"),C.writeFileSync("./index.js",o.a),S.cd("../routes"),S.rm("users.js"),C.writeFileSync("./index.js",h.a)})}),b.command("db:migrate","Run migrations for database").action(()=>{S.exec("sequelize db:migrate")}),b.command("generate <tool> <toolName> [toolActions...]","").action((e,r,n)=>{if(function(){let e=S.test("-e","bin")&&S.test("-e","config")&&S.test("-e","controllers")&&S.test("-e","node_modules")&&S.test("-e","routes")&&S.test("-e","views")&&S.test("-e","app.js")&&S.test("-e","package-lock.json")&&S.test("-e","package.json");S.cd(I);let r=e&&S.test("-e","error.js")&&S.test("-e","routes.js")&&S.test("-e","utilities.js")&&S.test("-e","view.js");return S.cd(".."),r}())switch(e){case"controller":if(S.config.silent=!0,function(e){let r=e+".js";if(S.cd(E),S.test("-e",r))return!0;S.cd(".."),S.cd(I);let n=C.readFileSync("routes.js").toString(),t=new RegExp("app.use('/"+e+"')");if(n.match(t))return!0;if(S.cd(".."),S.cd(N),S.test("-e",r))return!0;return S.cd(".."),!1}(r))return void console.error("Error: Controller "+r+" already exists.");!function(e,r,n){S.test("-e",E)||S.mkdir("controllers");S.cd(E);let t=r+".js";if(S.test("-e",t))return!0;console.log("Controller Name: "+r),S.rm(t),S.touch(t),console.log("Successfully generate controller with name: "+t);let o=w.a.replace(/{{!--actionName--!}}/g,"getIndex")+"\n\n",s=C.readFileSync(t);C.writeFileSync(t,s.toString()+o),n.forEach(e=>{let r=w.a.replace(/{{!--actionName--!}}/g,e)+"\n\n",n=C.readFileSync(t);C.writeFileSync(t,n.toString()+r)})}(0,r,n),function(e,r,n){let t=r+".js";S.cd(".."),S.cd("routes"),S.touch(t),C.writeFileSync(t,y.a.replace(/{{!--routeName--!}}/g,r));let o=C.readFileSync(t).toString();o=o.replace(/\/\/ !-- Do not remove this line --! \/\//,e=>{let n="router.all('/',"+r+"Controller.getIndex);\n"+e;return n}),n.forEach(e=>{o=o.replace(/\/\/ !-- Do not remove this line --! \/\//,n=>{let t="router.all('/"+e+"',"+r+"Controller."+e+");\n"+n;return t})}),C.writeFileSync(t,o)}(0,r,n),function(e,r,n){S.cd("../config");let t=C.readFileSync("routes.js").toString(),o=r+"Router",s=(t=t.replace(/\/\/ !-- Do not remove this line --! \/\//,e=>{let n="app.use('/"+r+"',"+o+");\n    "+e;return n})).match(/require\(.*\);/g),i=s[s.length-1];t=t.replace(i,i+"\nvar "+o+" = require('../routes/"+r+"');"),C.writeFileSync("routes.js",t)}(0,r),S.config.silent=!1;break;case"model":let t="sequelize model:generate --name "+r+" --attributes ";n.forEach((e,r,n)=>{n.length-1!=r?t+=e+",":t+=e}),S.exec(t)}else console.error("Error: You are not in a valid express-generate project")}),b.on("command:*",function(){_.red("Invalid command: %s\nSee --help for a list of available commands.",b.args.join(" ")),process.exit(1)}),b.on("--help",()=>{console.log(""),_.bold.underline("express-generate CLI"),console.log(""),console.log(""),_.brightBlue("Commands:"),console.log(""),_("  express-generate new <Project Name>                                   Create a new express-generate project"),console.log(""),_("  express-generate generate controller <Controller Name> [Actions...]   Create a new controller with the defined actions"),console.log(""),_("  express-generate generate model <field-name>:<data-type>              Create a new model with the predefined fields"),console.log(""),_("  express-generate db:migrate                                           Running migrations for database"),console.log(""),console.log(""),_.brightYellow.bold("Disclaimer: We use Sequelize CLI behind the scene to support ORM. If you want to use Sequelize CLI instead of using ours CLI, you are welcome to do so."),console.log(""),_.brightYellow.bold('Type "sequelize --help" to get more information'),console.log("")}),b.parse(process.argv)},function(e,r){e.exports=require("commander")},function(e,r){e.exports=require("shelljs")},function(e,r){e.exports=require("fs")},function(e,r){e.exports=require("inquirer")},function(e,r){e.exports=require("terminal-kit")}]);